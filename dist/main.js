(()=>{const e=function(){if(document.currentScript){const e=new URL(document.currentScript.src),t=`${e.origin}${e.pathname.substring(0,e.pathname.lastIndexOf("/")+1)}`;let s=e.searchParams.get("theme")||"";const n=localStorage.getItem("custom-theme");return n&&(s=n),{origin:t,theme:s}}return console.warn("Unable to determine script origin and theme"),{origin:"",theme:""}}();class t{#e="";#t="";#s="";#n=null;constructor(e,n){if(t.instance)return t.instance;t.instance=this,this.#e=e,this.#n=new s,this.#o(n)}get cssLink(){let e=document.querySelector("link.custom-theme-style");return e||(e=document.createElement("link"),e.rel="stylesheet",e.className="custom-theme-style",document.head.appendChild(e)),e}get theme(){return this.#t}set theme(e){this.#o(e)}#r(){this.#n.setIcon("open sidebar","open-sidebar"),this.#n.setIcon("new chat","new-chat")}#o(e){const t=this.cssLink;if(!e)return this.#t="",this.#s="",this.#n.themeUrl="",t.href="",document.body.classList.remove("custom-theme"),void localStorage.removeItem("custom-theme");this.#s=`${this.#e}theme/${e}/`,this.#t=e,this.#n.themeUrl=this.#s,t.href=`${this.#s}style.css`,document.body.classList.add("custom-theme"),localStorage.setItem("custom-theme",e),this.#r()}}class s{#s="";#i=new Map;#c=new Map;#h=new Set;#a=null;#l=null;constructor(e){this.#l=e||new n,this.#m()}set themeUrl(e){this.#s=e,this.#c.clear(),this.#u()}get themeUrl(){return this.#s}setIcon(e,t){"string"==typeof e&&"string"==typeof t?(this.#i.set(e,t),this.#d(e)):console.warn("Invalid input: buttonLabel and iconName must be strings")}#d(e){this.#h.add(e),this.#p()}#u(){this.#h=new Set(this.#i.keys()),this.#p()}async#p(){for(const e of this.#h)try{const t=this.#l.buttonFromText(e);if(t){const s=t.querySelector("svg");s&&await this.#g(e,s)}}catch(t){console.error(`Error processing update for "${e}":`,t)}this.#h.clear()}async#g(e,t){const s=this.#i.get(e);if(!s)return;const n=await this.#b(s);n&&this.#f(t,n)}async#b(e){if(!this.#s)return console.warn("Theme URL is not set"),null;const t=`${this.#s}/${e}.svg`;if(!this.#c.has(t))try{const e=await fetch(t);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const s=await e.text();this.#c.set(t,s)}catch(t){return console.error(`Failed to fetch icon: ${e}`,t),null}return this.#c.get(t)}#f(e,t){const s=document.createElement("div");s.innerHTML=t;const n=s.firstElementChild;n&&"svg"===n.tagName.toLowerCase()?(Array.from(e.attributes).forEach((e=>{n.hasAttribute(e.name)||n.setAttribute(e.name,e.value)})),e.replaceWith(n)):console.warn("Invalid SVG content received")}#m(){this.#a&&this.#a.disconnect();const e=e=>{"childList"===e.type&&e.addedNodes.forEach(t)},t=e=>{e.nodeType===Node.ELEMENT_NODE&&this.#y(e)};this.#a=new MutationObserver((t=>{t.forEach(e)})),this.#a.observe(document.body,{childList:!0,subtree:!0})}#y(e){"svg"===e.tagName.toLowerCase()&&this.#v(e),e.querySelectorAll("svg").forEach(this.#v.bind(this))}#v(e){const t=e.closest("button");if(!t)return;const s=this.#l.getVisibleTextContent(t);s&&this.#i.has(s)}}class n{buttonsFromText(e){const t=e.toLowerCase().trim(),s=document.querySelectorAll("button");return Array.from(s).filter((e=>this.getVisibleTextContent(e).toLowerCase().trim()===t))}buttonFromText(e){return this.buttonsFromText(e)?.[0]}getVisibleTextContent(e){let t="";for(let s of e.childNodes)s.nodeType===Node.TEXT_NODE?t+=s.textContent:s.nodeType===Node.ELEMENT_NODE&&(s.classList.contains("sr-only")?t+=s.textContent:"none"!==window.getComputedStyle(s).display&&"SVG"!==s.nodeName&&(t+=this.getVisibleTextContent(s)));return t}}const o=new t(e.origin,e.theme);window.themeApi=o})();